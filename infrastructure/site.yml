---
- name: Install latest Nexus Repository Manager
  hosts: all
  become: true
  tasks:
  - name: Ensure nexus group exists
    group:
      name: "{{ nexus_group }}"
      state: present

  - name: Ensure nexus user exists
    user:
      name: "{{ nexus_user }}"
      group: "{{ nexus_group }}"
      shell: /bin/bash
      create_home: no
      system: yes
      state: present

  - name: Download Nexus archive
    get_url:
      url: "https://download.sonatype.com/nexus/3/nexus-{{ nexus_version }}-linux-x86_64.tar.gz"
      dest: "/tmp/nexus-{{ nexus_version }}.gz"
      mode: '0644'

  - name: Create nexus install directory
    file:
      path: "{{ nexus_install_dir }}"
      state: directory
      owner: "{{ nexus_user }}"
      group: "{{ nexus_group }}"

  - name: Extract Nexus archive
    unarchive:
      src: "/tmp/nexus-{{ nexus_version }}.gz"
      dest: "{{ nexus_install_dir }}"
      remote_src: yes
      extra_opts: [--strip-components=1]
    notify:
      - Set nexus ownership

  - name: Create nexus data directory
    file:
      path: "{{ nexus_data_dir }}"
      state: directory
      owner: "{{ nexus_user }}"
      group: "{{ nexus_group }}"

  - name: Ensure nexus.rc file exists
    file:
      path: "{{ nexus_install_dir }}/bin/nexus.rc"
      state: touch
      owner: "{{ nexus_user }}"
      group: "{{ nexus_group }}"
      mode: '0644'

  - name: Configure nexus to run as nexus user
    lineinfile:
      path: "{{ nexus_install_dir }}/bin/nexus.rc"
      regexp: '^run_as_user='
      line: "run_as_user={{ nexus_user }}"

  - name: Create systemd service for nexus
    copy:
      dest: /etc/systemd/system/{{ nexus_service_name }}.service
      content: |
        [Unit]
        Description=nexus service
        After=network.target

        [Service]
        Type=forking
        LimitNOFILE=65536
        ExecStart={{ nexus_install_dir }}/bin/nexus start
        ExecStop={{ nexus_install_dir }}/bin/nexus stop
        User={{ nexus_user }}
        Restart=on-abort

        [Install]
        WantedBy=multi-user.target
    notify:
      - Reload systemd

  - name: Enable and start nexus service
    systemd:
      name: "{{ nexus_service_name }}"
      enabled: yes
      state: started

  # --- Проверка запуска ---
  - name: Wait for Nexus to start and listen on port {{ nexus_port }}
    wait_for:
      port: "{{ nexus_port }}"
      state: started
      delay: 10
      timeout: 180

  - name: Check Nexus service status
    command: systemctl is-active {{ nexus_service_name }}
    register: nexus_service_status
    changed_when: false

  - name: Fail if Nexus service is not active
    fail:
      msg: "Nexus service is not active!"
    when: nexus_service_status.stdout != "active"

  - name: Get Nexus version
    command: "{{ nexus_install_dir }}/bin/nexus --version"
    register: nexus_version_output
    changed_when: false
    failed_when: false

  - name: Show installed Nexus version
    debug:
      msg: "Installed Nexus version: {{ nexus_version_output.stdout if nexus_version_output.stdout else 'Unknown' }}"

  handlers:
  - name: Set nexus ownership
    file:
      path: "{{ nexus_install_dir }}"
      recurse: yes
      owner: "{{ nexus_user }}"
      group: "{{ nexus_group }}"

  - name: Reload systemd
    systemd:
      daemon_reload: yes
